class Markdown{constructor(){this.references=[]}
find_first_char_not(char,str){for(var i=0;i<str.length;i++){if(str[i]!=char)return i}
return-1};extractReferences(c){this.references=[];let block=!1;c.split('\n').forEach((l,i)=>{if(l.startsWith('```'))block=!block;if(block)return;const h=this.find_first_char_not('#',l);if(h>0&&l.charAt(h)===' ')return;let r=l.match(/\[(.*?)\]\: (.*)/g);if(r!==null){this.references.push([i,r[0]])}});return this.references}
getReference(match){let s=match.split('][');let title=s[0].substr(1);let id=s[1].substr(0,s[1].length-1);let found=this.references.find(i=>{let c=i[1];let name=c.substr(1).split(']: ')[0];return id===name});if(found===null||found===undefined){return `<a href="/">${title}</a>`}
let parts=found[1].split(' ');let href=parts[1];let alt='';if(parts.length>2)alt=' alt='+parts[2];let result=`<a href="${href} ${alt}">${title}</a>`;return result}
inlineHandler(l){l=l.replace(/!\[(.*?)\]\((.*) "(.*)"\)/g,`<img src="$2" title="$1" alt="$3">`);l=l.replace(/!\[(.*?)\]\((.*)\)/g,`<img src="$2" title="$1">`);l=l.replace(/\[(.*?)\]\((.*)\)/g,`<a href="$2">$1</a>`);l=l.replace(/\[(.*?)\]\[(.[^\[\]]*)\]/g,(match)=>{return this.getReference(match)});l=l.replace(/\<(http.*)\>/g,`<a href="$2">$1</a>`);l=l.replace(/\*\*(?! )(.*?)(?! )\*\*/g,`<strong>$1</strong>`);l=l.replace(/__(?! )(.*?)(?! )__/g,`<strong>$1</strong>`);l=l.replace(/(!")_(?! )(.*?)(?! )_(!")/g,`<em>$1</em>`);l=l.replace(/\*(?! )(.*?)(?! )\*/g,`<em>$1</em>`);l=l.replace(/~~(?! )(.*?)(?! )~~/g,`<s>$1</s>`);return l}
tableHandler(table){let t='';let lines=table.split('\n');let definition=lines[1];let columns=definition.split('|');columns.shift();columns.pop();let align=[];columns.forEach(c=>{let a='';c=c.trim();if(c.startsWith(':')&&c.endsWith(':'))a='center';else if(c.endsWith(':'))a='right';else if(c.startsWith(':'))a='left';align.push(a)});columns=columns.length;t+='<table>\n';t+='<tbody>\n';lines.forEach((l,i)=>{if(i===1||i===lines.length-1)return;let td='<td>\n';if(i===0){t+=t+='<thead>\n';td='<th>\n'}
t+='<tr>\n';for(let c=0;c<=columns;c++){if(align[c-1]!==''){t+=td.replace('>',` align="${align[c - 1]}">`)}else t+=td;t+=l.split('|')[c]+'\n';t+=td.replace('<','</')}
t+='</tr>\n';if(i===0)t+='</thead>\n'});t+='</tbody>\n';t+='</table>\n';return t}
listChr(l){l=l.trim();let listChr='';if(l.startsWith('- '))listChr='-';else if(l.startsWith('* '))listChr='*';if(listChr!=='')return listChr;listChr=l.match(/^(\d+). /);if(listChr===null)return'';return l.split(' ')[0]}
render(c){this.extractReferences(c);let result='';let block='';let blockquote=!1;let list='';let listLevel=-1;let listSpaces=2;let table='';const lines=c.split('\n');lines.forEach((l,i)=>{let paragraph=!0;let chr=this.listChr(l);if(chr===''&&listLevel>-1){let tag=`</${list}>`;result+=tag+tag.repeat(listLevel);list='';listLevel=-1}
if(blockquote&&!l.trim().startsWith('> ')){result+='<p>\n</blockquote>\n';blockquote=!1}
const x=this.find_first_char_not('#',l);if(block===''&&x>0&&l.charAt(x)===' '){l=`<h${x}>${l.substr(x)}</h${x}>`;paragraph=!1}
if(block===''&&i<lines.length-1){if(lines[i+1].startsWith('---')){l=`<h2>${l}</h2>`;paragraph=!1}else if(lines[i+1].startsWith('===')){l=`<h1>${l}</h1>`;paragraph=!1}}
if(block===''){if(l.startsWith('---')||l.startsWith('***')||l.startsWith('___')||l.startsWith('===')||l.startsWith('- - -')||l.startsWith('* * *')){paragraph=!1;l='<hr />'}}
if(l.startsWith('```')){paragraph=!1;let classes=l.split('```')[1];if(classes.trim().length<1)classes='';else classes=` class="${classes}" `;if(block===''){block='code';l=`<pre ${classes}><code>`}else if(block==='code'){block='';l='</pre></code>'}}
if(block==='code')paragraph=!1;if(l.trim().startsWith('<pre')){paragraph=!1;if(block==='')block='pre'}
if(l.trim().startsWith('</pre'))block='';if(block==='pre')paragraph=!1;if(block!==''&&l.startsWith('<!--')){l=l.replace('<!--','&lt;!--')}
l=l.replace(/\`/g,f=>{if(block===''){block='inline-code';return'<code>'}else if(block==='inline-code'){block='';return'</code>'}else return'`'});if(l.trim().startsWith('> ')&&block===''){if(!blockquote){l='<blockquote>\n<p>'+l.substr(2);blockquote=!0}else l=l.substr(2)}
if(blockquote)paragraph=!1;if(!l.startsWith('|')&&table!==''){l+='\n'+this.tableHandler(table)+'\n';table='';paragraph=!1;block=''}else if(l.startsWith('|')){if(block==='')block='table';table+=l+'\n';l=''}
if(table!=='')paragraph=!1;if(block==='')l=this.inlineHandler(l);chr=this.listChr(l);if(chr!==''&&block===''){let type='ul';if(!isNaN(chr))type='ol';let spaces=l.split(chr+' ')[0].length;let oldLevel=listLevel;let newLevel=Math.floor(spaces/listSpaces);if(list===''){listLevel=0;list=type;l=`<${type}>\n<li>${l.trim().substr(2)}</li>`}else if(newLevel>listLevel){listLevel+=1;list=type;l=`<${type}>\n<li>${l.trim().substr(2)}</li>`}else if(newLevel===listLevel){l=`<li>${l.trim().substr(2)}</li>`}else if(newLevel<listLevel){listLevel=newLevel;let tag=`</${list}>\n`;tag=tag.repeat(oldLevel-listLevel);l=tag+`<li>${l.trim().substr(2)}</li>`}}
if(list!=='')paragraph=!1;if(block===''){if(l.startsWith('<'))paragraph=!1;if(l.startsWith('<s>'))paragraph=!0;if(l.startsWith('<em>'))paragraph=!0;if(l.startsWith('<strong>'))paragraph=!0}
if(paragraph&&l.length>0)l='<p>'+l+'</p>';if(l.includes('<pre'))result+=l;else if(l.length<1)result+=l;else result+=l+'\n'});return result}}
let el=document.querySelector(".post-body.entry-content");let br=el.getElementsByTagName('br');while(br.length){br[0].parentNode.removeChild(br[0])}
let md=new Markdown();let c=el.innerHTML;el.innerHTML=md.render(c)
